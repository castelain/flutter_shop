"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const transformUtils_1 = require("./transformUtils");
const pathUtils_1 = require("./pathUtils");
const resolveVue_1 = require("./resolveVue");
const hash_sum_1 = __importDefault(require("hash-sum"));
const serverPluginHmr_1 = require("../server/serverPluginHmr");
exports.urlRE = /(url\(\s*['"]?)([^"')]+)(["']?\s*\))/;
exports.cssPreprocessLangRE = /(.+).(less|sass|scss|styl|stylus)$/;
function rewriteCssUrls(css, replacerOrBase) {
    let replacer;
    if (typeof replacerOrBase === 'string') {
        replacer = (rawUrl) => {
            return path_1.default.posix.resolve(path_1.default.posix.dirname(replacerOrBase), rawUrl);
        };
    }
    else {
        replacer = replacerOrBase;
    }
    return transformUtils_1.asyncReplace(css, exports.urlRE, async (match) => {
        const [matched, before, rawUrl, after] = match;
        if (pathUtils_1.isExternalUrl(rawUrl) ||
            rawUrl.startsWith('data:') ||
            rawUrl.startsWith('#')) {
            return matched;
        }
        return before + (await replacer(rawUrl)) + after;
    });
}
exports.rewriteCssUrls = rewriteCssUrls;
async function compileCss(root, publicPath, { source, filename, scoped, modules, preprocessLang }) {
    const id = hash_sum_1.default(publicPath);
    const postcssConfig = await loadPostcssConfig(root);
    const { compileStyleAsync } = resolveVue_1.resolveCompiler(root);
    if (publicPath.endsWith('.css') && !modules && !postcssConfig) {
        // no need to invoke compile for plain css if no postcss config is present
        return source;
    }
    return await compileStyleAsync({
        source,
        filename,
        id: `data-v-${id}`,
        scoped,
        modules,
        modulesOptions: {
            generateScopedName: `[local]_${id}`
        },
        preprocessLang: preprocessLang,
        preprocessCustomRequire: (id) => require(pathUtils_1.resolveFrom(root, id)),
        ...(postcssConfig
            ? {
                postcssOptions: postcssConfig.options,
                postcssPlugins: postcssConfig.plugins
            }
            : {})
    });
}
exports.compileCss = compileCss;
function codegenCss(id, css, modules) {
    let code = `import { updateStyle } from "${serverPluginHmr_1.hmrClientPublicPath}"\n` +
        `const css = ${JSON.stringify(css)}\n` +
        `updateStyle(${JSON.stringify(id)}, css)\n`;
    if (modules) {
        code += `export default ${JSON.stringify(modules)}`;
    }
    else {
        code += `export default css`;
    }
    return code;
}
exports.codegenCss = codegenCss;
let cachedPostcssConfig;
async function loadPostcssConfig(root) {
    if (cachedPostcssConfig !== undefined) {
        return cachedPostcssConfig;
    }
    try {
        const load = require('postcss-load-config');
        return (cachedPostcssConfig = await load({}, root));
    }
    catch (e) {
        if (!/No PostCSS Config found/.test(e.message)) {
            console.error(chalk_1.default.red(`[vite] Error loading postcss config:`));
            console.error(e);
        }
        return (cachedPostcssConfig = null);
    }
}
//# sourceMappingURL=cssUtils.js.map